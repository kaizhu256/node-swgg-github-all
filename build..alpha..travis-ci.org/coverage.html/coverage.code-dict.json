{"/home/travis/build/kaizhu256/node-swgg-github-all/test.js":"/* istanbul instrument in package swgg_github_all */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.local = (local.global.utility2 ||\n            require('./assets.utility2.rollup.js')).requireReadme();\n        // init test\n        local.testRunInit(local);\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        /* istanbul-ignore-next */\n        local.testCase_buildReadme_default = function (options, onError) {\n        /*\n         * this function will test buildReadme's default handling-behavior\n         */\n            var definition,\n                descriptionMediaType,\n                htmlToDescription,\n                operation,\n                operationIdDict,\n                schemaPMediaType,\n                stringUniqueKey,\n                swaggerJson,\n                tagDict,\n                textAll,\n                title,\n                typeDict,\n                tagMain,\n                tagSub,\n                tmp,\n                url;\n            htmlToDescription = function (options) {\n            /*\n             * this function will format options.html to swagger markdown-description\n             */\n                var text;\n                text = options.html\n                    // format whitespace\n                    .replace((/<pre\\b.*?><code>([\\S\\s]*?)<\\/code><\\/pre>/g), '<pre>$1</pre>')\n                    .replace((/<code>([\\S\\s]*?)<\\/code>/g), '<pre>$1</pre>')\n                    .replace((/<pre\\b.*?>[\\S\\s]*?<\\/pre>/g), function (match0) {\n                        return ('```' + match0\n                            .replace((/<[\\S\\s]*?>/g), '')\n                            .trim()\n                            .replace((/^\"([\\S\\s]+?)\"$/), '$1') + '```')\n                            .replace((/^```([\\S\\s]*?\\n[\\S\\s]*?)```$/g), '\\n```\\n$1\\n```\\n')\n                            .replace((/\\n/g), stringUniqueKey);\n                    })\n                    .replace((/\\n+/g), ' ')\n                    .replace((/<(?:dt|li)>(.*?<\\/(?:dt|li)>)/g), '\\n- $1')\n                    .replace((/<\\/dt>[\\S\\s]*?<dd>/g), ' - ')\n                    .replace((/<h.>/g), '\\n\\n#### ')\n                    .replace((/<p>/g), '\\n\\n')\n                    .replace((/<(?:br|pre)>/g), '\\n')\n                    // bug-workaround - format application/vnd.xxx\n                    .replace((/```(application\\/.*?)```/g), '\\n```\\n$1\\n```\\n')\n                    // format <a>\n                    .replace((/<a href=\"\\//g), '<a href=\"https://developer.github.com/')\n                    .replace((/<a href=\"#/g), '<a href=\"' + options.url + '#')\n                    .replace((/<a href=\"(.*?)\".*?>(.*?)<\\/a>/g), '[$2]($1)')\n                    // format <xxx>\n                    .replace((/<(?:b|strong)>(.*?)<\\/(?:b|strong)>/g), '**$1**')\n                    .replace(new RegExp('<\\\\/?(?:' +\n                        'a|dd|div|dl|em|h.|img|li|p|pre|select|span|t\\\\w*?|ul' +\n                        ')\\\\b[^<>]*?>', 'g'), '')\n                    // format whitespace\n                    .replace((/^ +/gm), '')\n                    .replace((/\\n{3,}/g), '\\n\\n')\n                    .replace(new RegExp(stringUniqueKey, 'g'), '\\n')\n                    .replace((/ +$/gm), '')\n                    .trim();\n                local.assert(\n                    text.indexOf('<') < 0,\n                    [url, local.stringTruncate(text.replace((/[\\S\\s]*?</), '<'), 100)]\n                );\n                return text.split('\\n');\n            };\n            // init options\n            options = options || {};\n            textAll = local.tryCatchReadFile('.apidoc.raw.html', 'utf8');\n            if (!textAll) {\n                onError(null, options);\n                return;\n            }\n            // init stringUniqueKey\n            stringUniqueKey = local.stringUniqueKey(textAll);\n            // init swaggerJson\n            swaggerJson = {};\n/* jslint-ignore-begin */\nswaggerJson =\n{\n    \"basePath\": \"/\",\n    \"definitions\": {},\n    \"info\": {\n        \"title\": \"\",\n        \"version\": \"\"\n    },\n    \"parameters\": {\n        \"github-all.key\": {\n            \"default\": \"xxxxxxxx\",\n            \"in\": \"query\",\n            \"name\": \"access_token\",\n            \"type\": \"string\",\n            \"x-swgg-apiKey\": true,\n            \"x-swgg-descriptionLineList\": [\n                \"https://developer.github.com/v3/#authentication\",\n                \"\",\n                \"OAuth2 token (sent as a parameter)\",\n            ]\n        },\n        \"github-all.user-agent\": {\n            \"default\": \"Awesome-Octocat-App\",\n            \"description\": \"user-agent header\",\n            \"in\": \"header\",\n            \"name\": \"user-agent\",\n            \"required\": true,\n            \"type\": \"string\",\n            \"x-swgg-descriptionLineList\": [\n                \"https://developer.github.com/v3/index.html#user-agent-required\",\n                \"\",\n                \"All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.\"\n            ]\n        }\n    },\n    \"paths\": {},\n    \"schemes\": [\n        \"https\"\n    ],\n    \"swagger\": \"2.0\",\n    \"tags\": [],\n    \"x-swgg-corsForwardProxyHost\": \"disabled\",\n    \"x-swgg-fixErrorSemanticUniquePath\": true,\n    \"x-swgg-operationIdFromPath\": true,\n    \"x-swgg-tags0-override\": {}\n}\n;\n/* jslint-ignore-end */\n            operationIdDict = {};\n            tagDict = {};\n            typeDict = {\n                type: 'string',\n                url: 'string'\n            };\n            textAll.split('\\n</html>\\n').slice(0, -1).forEach(function (textPage, ii) {\n                if (ii === 0) {\n                    textPage.replace(new RegExp(\n                        ' data-proofer-ignore><\\\\/a><a href=\"(.*?)\">(.*?)<\\\\/a><\\\\/h3>\\\\n' +\n                            '([\\\\S\\\\s]*?)<\\\\/ul>',\n                        'g'\n                    ), function (tag, pathname, title, match2) {\n                        if (title === 'Overview') {\n                            return;\n                        }\n                        tag = 'github-' + pathname.split('/')[2];\n                        swaggerJson['x-swgg-tags0-override'][tag] = {\n                            'x-swgg-descriptionLineList': {}\n                        };\n                        tagDict[tag] = tag;\n                        match2.replace((/href=\"\\/v3\\/(.*?)\\/\"/g), function (match0, match1) {\n                            match0 = 'github-' + match1.replace((/\\//g), '-');\n                            tagDict[match0] = tag;\n                        });\n                    });\n                    // bug-workaround - hard-code tagDict.scim\n                    tagDict['github-scim'] = 'github-scim';\n                    swaggerJson['x-swgg-tags0-override']['github-scim'] = {\n                        'x-swgg-descriptionLineList': {}\n                    };\n                    return;\n                }\n                textPage = textPage.trim().replace((/\\s+$/gm), '');\n                tmp = (/^(developer.github.com\\/v3\\/(.*?))\\/index.html\\n/).exec(textPage);\n                // init tagMain\n                tagSub = 'github-' + tmp[2].replace((/\\//g), '-');\n                tagMain = tagDict[tagSub];\n                if (!tagMain) {\n                    return;\n                }\n                // init schemaPMediaType\n                schemaPMediaType = {\n                    collectionFormat: 'csv',\n                    in: 'header',\n                    items: { type: 'string' },\n                    name: 'accept',\n                    type: 'array',\n                    'x-swgg-descriptionLineList': [\n                        'https://developer.github.com/v3/media/',\n                        ''\n                        /* jslint-ignore-next-line */\n                        , \"Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.\"\n                    ]\n                };\n                // init schemaPMediaType.enum\n                schemaPMediaType.enum = {};\n                textPage.replace((/\\bapplication\\/vnd\\.[\\w\\+\\-\\.]+/g), function (match0) {\n                    match0 = match0.trim().replace('VERSION', 'v3');\n                    schemaPMediaType.enum[match0] = true;\n                    if (match0.indexOf('preview') >= 0) {\n                        schemaPMediaType.default = [match0];\n                        schemaPMediaType.required = true;\n                    }\n                });\n                schemaPMediaType.enum['application/vnd.github.v3+json'] = true;\n                schemaPMediaType.enum = Object.keys(schemaPMediaType.enum);\n                // init descriptionMediaType\n                descriptionMediaType = '';\n                textPage.replace((/<\\/a>Custom media types<[\\S\\s]*?<\\/code>/), function (match0) {\n                    descriptionMediaType = '\\n<p>' + match0;\n                });\n                // init title\n                title = (/<title>(.*?) \\|/).exec(textPage)[1];\n                // init url\n                url = 'https://' + tmp[1] + '/';\n                textPage.split('\\n<h2>\\n').forEach(function (textOperation, ii) {\n                    if (ii === 0) {\n                        // init tag.description\n                        tmp = '';\n                        textOperation.replace((\n                            /(\\n<p>[\\S\\s]*?)(?:$|<option |<pre><code>[A-Z]+ \\/)/\n                        ), function (match0, match1) {\n                            match0 = match1;\n                            if ((/[^\\s<>]<|>[^\\s<>]/).test(match0)) {\n                                tmp += match0;\n                            }\n                        });\n                        tmp += descriptionMediaType;\n                        swaggerJson['x-swgg-tags0-override'][tagMain][\n                            'x-swgg-descriptionLineList'\n                        ][tagSub] = htmlToDescription({\n                            html: '# [' + title + '](' + url + ')\\n<p>' +\n                                (tmp.trim() || 'no description'),\n                            url: url\n                        });\n                    }\n                    tmp = new RegExp('href=\"(#.*?)\" .*?<\\\\/a>(.*?)<.*?\\\\n([\\\\S\\\\s]*?)' +\n                        '<pre><code>([A-Z]+?) +([\\\\w&\\\\-.\\\\/:;=\\\\?]+?)\\\\n').exec(textOperation);\n                    if (!tmp) {\n                        return;\n                    }\n                    // init options\n                    options.method = tmp[4];\n                    options.tags = [tagMain];\n                    options.url = tmp[5].replace((/:([\\w\\-]+)/g), '{$1}');\n                    if (options.url[0] === '/') {\n                        options.url = 'https://api.github.com' + options.url;\n                    }\n                    options['x-swgg-tags0'] = tagMain;\n                    // init options.data\n                    options.data = null;\n                    textOperation.replace((\n                        /<code><span class=\"p\">(\\{[\\S\\s]+?)<\\/code>[\\S\\s]*?<\\/a>Response<\\/h3>\\n/\n                    ), function (match0, match1) {\n                        match0 = match1;\n                        match0 = match0.replace((/<.*?>/g), '').trim().replace((/'$/g), '');\n                        options.data = JSON.stringify(JSON.parse(match0));\n                    });\n                    // init operation\n                    operation = {};\n                    // init operation.description\n                    operation['x-swgg-descriptionLineList'] = htmlToDescription({\n                        html: '[' + title + '](' + url + tmp[1] + ') - ' + tmp[2] + '\\n<p>' +\n                            tmp[3],\n                        url: url\n                    });\n                    // init operation.operationId\n                    tmp = 0;\n                    while (true) {\n                        operation.operationId = local.operationIdFromAjax(options);\n                        if (!operationIdDict[operation.operationId]) {\n                            break;\n                        }\n                        tmp += 1;\n                        options.url = (options.url + '#').replace((/#.*$/g), '#' + tmp);\n                    }\n                    operationIdDict[operation.operationId] = true;\n                    // init operation from ajax\n                    local.swaggerJsonFromAjax(swaggerJson, options);\n                    tmp = local.urlParseWithBraket(options.url);\n                    operation = local.objectSetDefault(swaggerJson.paths[\n                        tmp.pathname + tmp.hash\n                    ][\n                        options.method.toLowerCase()\n                    ], operation);\n                    // init operation.parameters\n                    operation.parameters = [{\n                        \"$ref\": \"#/parameters/github-all.key\"\n                    }, {\n                        \"$ref\": \"#/parameters/github-all.user-agent\"\n                    }, schemaPMediaType].concat(operation.parameters);\n                    operation['x-swgg-sortValue'] = operation['x-swgg-descriptionLineList'][0];\n                    // init definition\n                    definition = swaggerJson.definitions[operation.operationId + '.body'];\n                    textOperation.split('\\n</table>\\n')[0].replace(new RegExp('<tr>\\\\n' +\n                        '<td><code>(.*?)<\\\\/code><\\\\/td>\\\\n' +\n                        '<td><code>(.*?)<\\\\/code><\\\\/td>\\\\n' +\n                        '<td>([\\\\S\\\\s]*?)<\\\\/td>\\\\n' +\n                        '<\\\\/tr>\\\\n', 'g'), function (schemaP, name, type, description) {\n                        type = type.toLowerCase();\n                        // init schemaP\n                        schemaP = {\n                            default: definition &&\n                                definition.properties[name] &&\n                                definition.properties[name].default,\n                            in: 'query',\n                            name: name,\n                            required: description.indexOf('<strong>Required</strong>') > 0,\n                            type: typeDict[type] || type,\n                            'x-swgg-descriptionLineList': htmlToDescription({\n                                html: description,\n                                url: url\n                            })\n                        };\n                        // init default\n                        description.replace((\n                            / Default:.*?<code>(.*?)<\\/code>/\n                        ), function (match0, match1) {\n                            match0 = match1;\n                            schemaP.default = match0.trim().replace((/^\"|\"$/g), '') ||\n                                schemaP.default;\n                        });\n                        // init enum\n                        description.replace((\n                            /(Comma-separated list of values)|Can be one of/\n                        ), function (match0, match1) {\n                            if (schemaP.type === 'boolean') {\n                                return;\n                            }\n                            match0 = match1;\n                            if (match0) {\n                                schemaP.items = { type: 'string' };\n                                schemaP.type = 'array';\n                            }\n                            schemaP.enum = {};\n                            description.replace((\n                                /<code>([^,]+?)<\\/code>/g\n                            ), function (match0, match1) {\n                                match0 = match1;\n                                match0 = match0.trim().replace((/^\"|\"$/g), '');\n                                if (match0.indexOf('&lt;') >= 0) {\n                                    schemaP.enum = undefined;\n                                }\n                                if (schemaP.enum) {\n                                    schemaP.enum[match0] = true;\n                                }\n                            });\n                            if (schemaP.enum) {\n                                schemaP.enum = Object.keys(schemaP.enum);\n                            }\n                        });\n                        local.tryCatchOnError(function () {\n                            schemaP.default = JSON.parse(schemaP.default);\n                        }, local.nop);\n                        if (schemaP.type === 'array') {\n                            schemaP.items = { type: schemaP.default\n                                ? typeof schemaP.default[0]\n                                : 'string' };\n                        }\n                        // init parameters\n                        if (operation.parameters.some(function (element) {\n                                if (element.name === schemaP.name) {\n                                    local.objectSetOverride(element, {\n                                        default: element.in === 'body'\n                                            ? undefined\n                                            : schemaP.element,\n                                        required: schemaP.required || undefined,\n                                        'x-swgg-descriptionLineList':\n                                            schemaP['x-swgg-descriptionLineList']\n                                    });\n                                    return true;\n                                }\n                            })) {\n                            return;\n                        }\n                        if (!definition) {\n                            operation.parameters.push(schemaP);\n                            return;\n                        }\n                        definition.properties[name] = definition.properties[name] || {};\n                        local.objectSetOverride(definition.properties[name], {\n                            default: schemaP.default,\n                            enum: schemaP.enum,\n                            items: schemaP.items,\n                            type: schemaP.type,\n                            'x-swgg-descriptionLineList': schemaP['x-swgg-descriptionLineList']\n                        });\n                        if (schemaP.required) {\n                            definition.required = definition.required || [];\n                            definition.required.push(name);\n                        }\n                    });\n                });\n            });\n            // init tags\n            swaggerJson.tags = Object.keys(swaggerJson['x-swgg-tags0-override'])\n                .sort(function (aa, bb) {\n                    return aa < bb\n                        ? -1\n                        : 1;\n                })\n                .map(function (key) {\n                    tagDict = swaggerJson['x-swgg-tags0-override'][key];\n                    tmp = tagDict['x-swgg-descriptionLineList'];\n                    tagDict['x-swgg-descriptionLineList'] = Array.prototype.concat.apply(\n                        [],\n                        Object.keys(tmp)\n                            .sort(function (aa, bb) {\n                                return aa === key\n                                    ? -1\n                                    : bb === key\n                                    ? 1\n                                    : tmp[aa][0] < tmp[bb][0]\n                                    ? -1\n                                    : 1;\n                            })\n                            .map(function (key) {\n                                return [''].concat(tmp[key]);\n                            })\n                    ).slice(1);\n                    return {\n                        name: key,\n                        'x-swgg-descriptionLineList': tagDict['x-swgg-descriptionLineList']\n                    };\n                });\n            // bug-workaround - misc\n            [\n                '_2Forgs_2F_7Borg_7D_2Fhooks_2F_7Bid_7D_20PATCH.body',\n                '_2Forgs_2F_7Borg_7D_2Finvitations_20POST.body',\n                '_2Frepos_2F_7Bowner_7D_2F_7Brepo_7D_2Fhooks_2F_7Bid_7D_20PATCH.body'\n            ].forEach(function (key) {\n                swaggerJson.definitions[key].required = undefined;\n            });\n            // normalize swaggerJson\n            local.normalizeSwaggerJson(swaggerJson);\n            // save swaggerJson\n            local.fs.writeFileSync(\n                'assets.swgg.swagger.json',\n                local.jsonStringifyOrdered(swaggerJson, null, 4)\n            );\n            local.buildReadme({}, onError);\n        };\n    }());\n}());\n","/home/travis/build/kaizhu256/node-swgg-github-all/lib.swgg_github_all.js":"/* istanbul instrument in package swgg_github_all */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        /* istanbul ignore next */\n        if (local) {\n            local = local.global.utility2_rollup ||\n                local.global.utility2_rollup_old ||\n                require('./assets.utility2.rollup.js');\n            local.fs = null;\n        }\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_swgg_github_all = local;\n        } else {\n            // require builtins\n            // local.assert = require('assert');\n            local.buffer = require('buffer');\n            local.child_process = require('child_process');\n            local.cluster = require('cluster');\n            local.console = require('console');\n            local.constants = require('constants');\n            local.crypto = require('crypto');\n            local.dgram = require('dgram');\n            local.dns = require('dns');\n            local.domain = require('domain');\n            local.events = require('events');\n            local.fs = require('fs');\n            local.http = require('http');\n            local.https = require('https');\n            local.module = require('module');\n            local.net = require('net');\n            local.os = require('os');\n            local.path = require('path');\n            local.process = require('process');\n            local.punycode = require('punycode');\n            local.querystring = require('querystring');\n            local.readline = require('readline');\n            local.repl = require('repl');\n            local.stream = require('stream');\n            local.string_decoder = require('string_decoder');\n            local.timers = require('timers');\n            local.tls = require('tls');\n            local.tty = require('tty');\n            local.url = require('url');\n            local.util = require('util');\n            local.v8 = require('v8');\n            local.vm = require('vm');\n            local.zlib = require('zlib');\n/* validateLineSortedReset */\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n        }\n        // init lib\n        local.local = local.swgg_github_all = local;\n    }());\n}());\n","/home/travis/build/kaizhu256/node-swgg-github-all/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of swgg-github-all\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install swgg-github-all && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package swgg_github_all */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_swgg_github_all\n            : global.utility2_moduleExports);\n        // init exports\n        local.global.local = local;\n        // init assets\n        local.assetsDict['/assets.index.template.html'] = local.assetsDict['/assets.swgg.html'];\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-test\n    /* istanbul ignore next */\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - init-test\n    /* istanbul ignore next */\n    case 'node':\n        // init exports\n        module.exports = local;\n        // require builtins\n        // local.assert = require('assert');\n        local.buffer = require('buffer');\n        local.child_process = require('child_process');\n        local.cluster = require('cluster');\n        local.console = require('console');\n        local.constants = require('constants');\n        local.crypto = require('crypto');\n        local.dgram = require('dgram');\n        local.dns = require('dns');\n        local.domain = require('domain');\n        local.events = require('events');\n        local.fs = require('fs');\n        local.http = require('http');\n        local.https = require('https');\n        local.module = require('module');\n        local.net = require('net');\n        local.os = require('os');\n        local.path = require('path');\n        local.process = require('process');\n        local.punycode = require('punycode');\n        local.querystring = require('querystring');\n        local.readline = require('readline');\n        local.repl = require('repl');\n        local.stream = require('stream');\n        local.string_decoder = require('string_decoder');\n        local.timers = require('timers');\n        local.tls = require('tls');\n        local.tty = require('tty');\n        local.url = require('url');\n        local.util = require('util');\n        local.v8 = require('v8');\n        local.vm = require('vm');\n        local.zlib = require('zlib');\n/* validateLineSortedReset */\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        [\n            'assets.index.css',\n            'assets.index.template.html',\n            'assets.swgg.swagger.json',\n            'assets.swgg.swagger.server.json'\n        ].forEach(function (file) {\n            file = '/' + file;\n            local.assetsDict[file] = local.assetsDict[file] || '';\n            if (local.fs.existsSync(local.__dirname + file)) {\n                local.assetsDict[file] = local.fs.readFileSync(\n                    local.__dirname + file,\n                    'utf8'\n                );\n            }\n        });\n/* validateLineSortedReset */\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.swgg_github_all.js'] = local.assetsDict['/assets.swgg_github_all.js'] ||\n            local.fs.readFileSync(local.__dirname + '/lib.swgg_github_all.js', 'utf8'\n        ).replace((/^#!/), '//');\n/* validateLineSortedReset */\n        local.assetsDict['/'] =\n            local.assetsDict['/assets.example.html'] =\n            local.assetsDict['/assets.index.template.html']\n            .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                switch (match1) {\n                case 'npm_package_description':\n                    return 'the greatest app in the world!';\n                case 'npm_package_name':\n                    return 'swgg-github-all';\n                case 'npm_package_nameLib':\n                    return 'swgg_github_all';\n                case 'npm_package_version':\n                    return '0.0.1';\n                default:\n                    return match0;\n                }\n            });\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());"}
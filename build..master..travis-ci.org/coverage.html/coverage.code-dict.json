{"/home/travis/build/kaizhu256/node-swgg-github-all/test.js":"/* istanbul instrument in package swgg_github_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.local = (local.global.utility2 ||\n            require('./assets.utility2.rollup.js')).requireReadme();\n        // init test\n        local.testRunInit(local);\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        local.testCase_buildReadme_default = function (options, onError) {\n        /*\n         * this function will test buildReadme's default handling-behavior\n         */\n            var definition,\n                definitionName,\n                headerAccept,\n                headerAcceptDict,\n                htmlToDescription,\n                method,\n                operation,\n                operationIdDict,\n                parametersPathDict,\n                path,\n                pathDict,\n                swaggerJson,\n                tagDict,\n                textAll,\n                title,\n                typeDict,\n                tag,\n                tmp,\n                url,\n                urlParsed;\n            textAll = local.tryCatchReadFile('.apidoc.raw.html', 'utf8');\n            if (!textAll) {\n                onError(null, options);\n                return;\n            }\n            htmlToDescription = function (options) {\n            /*\n             * this function will format options.html to swagger markdown-description\n             */\n                return options.html\n                    // format \\n\n                    .replace((/\\n\\n+/g), '\\n')\n                    .replace((/\\n<li>/g), '\\n\\n<li>')\n                    .replace((/\\n<(?:p|pre)>/g), '\\n\\n')\n                    .replace((/\\n([^\\n])/g), ' $1')\n                    .replace((/\\n /g), '\\n')\n                    // format header accept\n                    .replace((/( header:)<\\/p>\\n(<code>)/g), '$1 $2')\n                    // format <a>\n                    .replace((/<a href=\"\\//g), '<a href=\"https://developer.github.com/')\n                    .replace((/<a href=\"#/g), '<a href=\"' + options.url + '#')\n                    .replace((/<a href=\"(.*?)\".*?>(.*?)<\\/a>/g), '[$2]($1)')\n                    // format <xxx>\n                    .replace((/<code>(.*?)<\\/code>/g), '```$1```')\n                    .replace((/<li>(.*?)<\\/li>/g), '  - $1')\n                    .replace((/<strong>(.*?)<\\/strong>/g), '**$1**')\n                    .replace((/<[^<>]*?>/g), '')\n                    // format whitespace\n                    .replace((/ {1,}/g), ' ')\n                    .split('\\n')\n                    .map(function (element) {\n                        return element.trim();\n                    })\n                    .filter(local.echo)\n                    .map(function (element) {\n                        return element + '\\n';\n                    });\n            };\n            // init swaggerJson\n            swaggerJson = {};\n/* jslint-ignore-begin */\nswaggerJson =\n{\n    \"basePath\": \"/\",\n    \"definitions\": {},\n    \"info\": {\n        \"title\": \"\",\n        \"version\": \"\"\n    },\n    \"parameters\": {\n        \"github-all.key\": {\n            \"default\": \"xxxxxxxx\",\n            \"in\": \"query\",\n            \"name\": \"access_token\",\n            \"type\": \"string\",\n            \"x-swgg-apiKey\": true,\n            \"x-swgg-descriptionLineList\": [\n                \"OAuth2 token (sent as a parameter)\\n\",\n                \"https://developer.github.com/v3/#authentication\\n\"\n            ]\n        },\n        \"github-all.user-agent\": {\n            \"default\": \"Awesome-Octocat-App\",\n            \"description\": \"user-agent header\",\n            \"in\": \"header\",\n            \"name\": \"user-agent\",\n            \"required\": true,\n            \"type\": \"string\",\n            \"x-swgg-descriptionLineList\": [\n                \"All API requests MUST include a valid User-Agent header. Requests with no User-Agent header will be rejected. We request that you use your GitHub username, or the name of your application, for the User-Agent header value. This allows us to contact you if there are problems.\\n\",\n                \"https://developer.github.com/v3/index.html#user-agent-required\\n\"\n            ]\n        }\n    },\n    \"paths\": {},\n    \"schemes\": [\n        \"https\"\n    ],\n    \"swagger\": \"2.0\",\n    \"tags\": [],\n    \"x-swgg-corsForwardProxyHost\": \"disabled\",\n    \"x-swgg-operationIdFromPath\": true,\n    \"x-swgg-tags0-override\": {}\n}\n;\n/* jslint-ignore-end */\n            headerAcceptDict = {\n                'application/vnd.github.eye-scream-preview+json': 1,\n                'application/vnd.github.valkyrie-preview+json': 1\n            };\n            operationIdDict = {};\n            parametersPathDict = {};\n            tagDict = {};\n            typeDict = {\n                type: 'string',\n                url: 'string'\n            };\n            textAll.replace((\n                /\\n<p><strong>Custom media type:<\\/strong> <code>(.*)<\\/code>/g\n            ), function (match0, match1) {\n                match0 = match1;\n                if (match0 === 'jean-grey-preview') {\n                    return;\n                }\n                headerAcceptDict['application/vnd.github.' + match0 + '+json'] = 1;\n            });\n            textAll.split('\\n</html>\\n').slice(0, -1).forEach(function (text, ii) {\n                if (ii === 0) {\n                    text.replace(new RegExp(\n                        ' data-proofer-ignore><\\\\/a><a href=\"(.*?)\">(.*?)<\\\\/a><\\\\/h3>\\\\n' +\n                            '([\\\\S\\\\s]*?)<\\\\/ul>',\n                        'g'\n                    ), function (tag, pathname, title, match2) {\n                        if (title === 'Overview') {\n                            return;\n                        }\n                        tag = 'github-' + pathname.split('/')[2];\n                        swaggerJson['x-swgg-tags0-override'][tag] = {\n                            externalDocs: { url: 'https://developer.github.com' + pathname },\n                            name: tag\n                        };\n                        tagDict[tag] = tag;\n                        match2.replace((/href=\"\\/v3\\/(.*?)\\/\"/g), function (match0, match1) {\n                            match0 = 'github-' + match1.replace((/\\//g), '-');\n                            tagDict[match0] = tag;\n                        });\n                    });\n                    // bug-workaround - hard-code tagDict.scim\n                    tagDict['github-scim'] = 'github-scim';\n                    swaggerJson['x-swgg-tags0-override']['github-scim'] = {\n                        externalDocs: { url: 'https://developer.github.com/v3/scim/' },\n                        name: 'github-scim'\n                    };\n                    return;\n                }\n                text = text.trim().replace((/\\s+$/gm), '');\n                tmp = (/^tmp\\/(developer.github.com\\/v3\\/(.*?))\\/index.html\\n/).exec(text);\n                // init tag\n                tmp[2] = 'github-' + tmp[2].replace((/\\//g), '-');\n                tag = tagDict[tmp[2]];\n                if (!tag) {\n                    return;\n                }\n                // init headerAccept\n                headerAccept = null;\n                text.replace((\n                    /\\n<pre><code> *?(application\\/vnd\\..*?)\\n/g\n                ), function (match0, match1) {\n                    match0 = (match1 + '+json').replace((/\\+json\\b.*?$/), '+json');\n                    headerAcceptDict[match0] = headerAcceptDict[match0] || 0;\n                    if (headerAcceptDict[match0]) {\n                        headerAcceptDict[match0] += 1;\n                        headerAccept = match0;\n                    }\n                });\n                // init title\n                title = (/<title>(.*?) \\|/).exec(text)[1];\n                // init url\n                url = 'https://' + tmp[1] + '/';\n                // init tag.description\n                if (swaggerJson['x-swgg-tags0-override'][tmp[2]]) {\n                    swaggerJson['x-swgg-tags0-override'][tag]\n                        .externalDocs['x-swgg-descriptionLineList'] = htmlToDescription({\n                            html: title + '.' +\n                                (/(\\n<p>[\\S\\s]*?)(?:\\n<h2>|<option )/).exec(text)[1],\n                            url: url\n                        }).concat([ '[' + url + '](' + url + ')\\n' ]);\n                }\n                text.split('\\n<h2>\\n').forEach(function (text) {\n                    tmp = new RegExp('href=\"(#.*?)\" .*?<\\\\/a>(.*?)<.*?\\\\n' +\n                        '([\\\\S\\\\s]*?)<pre><code>([A-Z]+?) +([\\\\w&\\\\-.\\\\/:;=\\\\?]+?)\\\\n').exec(text);\n                    if (!tmp) {\n                        return;\n                    }\n                    // init definition\n                    definition = { properties: {}, 'x-swgg-tags0': tag };\n                    // init operation\n                    operation = {\n                        parameters: [{\n                            \"$ref\": \"#/parameters/github-all.key\"\n                        }, {\n                            \"$ref\": \"#/parameters/github-all.user-agent\"\n                        }, {\n                            default: headerAccept || 'application/vnd.github+json',\n                            description: 'accept header\\n\\n' +\n                                '[https://developer.github.com/v3/media]' +\n                                '(https://developer.github.com/v3/media)',\n                            in: 'header',\n                            name: 'accept',\n                            required: !!headerAccept,\n                            type: 'string'\n                        }],\n                        responses: { default: { description: 'default response' } },\n                        tags: [tag],\n                        'x-swgg-host': 'api.github.com',\n                        'x-swgg-tags0': tag\n                    };\n                    // init description\n                    operation['x-swgg-descriptionLineList'] = htmlToDescription({\n                        html: title + ' - ' + tmp[2] + '.\\n<p>' +\n                            tmp[3] + '\\n<p>' +\n                            url + tmp[1],\n                        url: url\n                    });\n                    // init sortValue\n                    operation['x-swgg-sortValue'] = operation['x-swgg-descriptionLineList'][0];\n                    // init method\n                    method = tmp[4].toLowerCase();\n                    // init path\n                    urlParsed = local.urlParse(tmp[5]);\n                    path = urlParsed.pathname\n                        .replace((/&gt;|&lt;/g), '')\n                        .replace((/:[\\w\\-]+/g), function (name) {\n                            name = name.slice(1);\n                            tmp = {\n                                in: 'path',\n                                name: name,\n                                required: true,\n                                type: 'string'\n                            };\n                            operation.parameters.push(tmp);\n                            parametersPathDict[name] = tmp;\n                            return '{' + name + '}';\n                        });\n                    Object.keys(urlParsed.query).forEach(function (key) {\n                        tmp = {\n                            default: urlParsed.query[key],\n                            in: 'query',\n                            name: key,\n                            type: 'string'\n                        };\n                        operation.parameters.push(tmp);\n                        parametersPathDict[key] = tmp;\n                    });\n                    for (tmp = 0; operationIdDict[operation.operationId]; tmp += 1) {\n                        operation.operationId = encodeURIComponent(path + (tmp\n                            ? '#' + tmp\n                            : '') + ' ' + method.toUpperCase())\n                            .replace((/[^\\w\\-.]/g), '_');\n                    }\n                    if (tmp > 1) {\n                        path += '#' + tmp;\n                    }\n                    operationIdDict[operation.operationId] = true;\n                    // init definitionName\n                    definitionName = tag +\n                        '.' + path.slice(1).replace((/\\//g), '-') +\n                        '.' + method +\n                        '.body';\n                    text.split('\\n</table>\\n')[0].replace(new RegExp('<tr>\\\\n' +\n                        '<td><code>(.*?)<\\\\/code><\\\\/td>\\\\n' +\n                        '<td><code>(.*?)<\\\\/code><\\\\/td>\\\\n' +\n                        '<td>(\\n{0,1}.*?)<\\\\/td>\\\\n' +\n                        '<\\\\/tr>\\\\n', 'g'), function (schemaP, name, type, description) {\n                        type = type.toLowerCase();\n                        // init schemaP\n                        schemaP = {\n                            default: (/ Default: [^.]*<code>(.*?)<\\/code>/).exec(description) ||\n                                undefined,\n                            in: 'query',\n                            name: name,\n                            required: description.indexOf('<strong>Required</strong>') > 0,\n                            type: typeDict[type] || type,\n                            'x-swgg-descriptionLineList': htmlToDescription({\n                                html: description,\n                                url: url\n                            })\n                        };\n                        if (schemaP.default) {\n                            schemaP.default = schemaP.default[1];\n                        }\n                        if (schemaP.type === 'array') {\n                            schemaP.items = { type: 'string' };\n                            schemaP.default = [schemaP.default];\n                        }\n                        if (schemaP.type !== 'string' && typeof schemaP.default === 'string') {\n                            schemaP.default = JSON.parse(schemaP.default);\n                        }\n                        if (parametersPathDict[name]) {\n                            local.objectSetDefault(parametersPathDict[name], schemaP);\n                            return;\n                        }\n                        switch (method) {\n                        case 'patch':\n                        case 'post':\n                        case 'put':\n                            // init definition\n                            definition.properties[name] = {\n                                default: schemaP.default,\n                                items: schemaP.items,\n                                type: schemaP.type,\n                                'x-swgg-descriptionLineList': schemaP['x-swgg-descriptionLineList']\n                            };\n                            if (schemaP.required) {\n                                definition.required = definition.required || [];\n                                definition.required.push(name);\n                            }\n                            break;\n                        default:\n                            operation.parameters.push(schemaP);\n                        }\n                    });\n                    // init definition.default\n                    text.replace((\n                        /<\\/span><\\/a>Example Input<\\/h3>\\n([\\S\\s]+?\\n<\\/span><\\/code><\\/pre>\\n)/\n                    ), function (defaultDict, match1) {\n                        defaultDict = JSON.parse(match1.replace((/<.*?>/g), ''));\n                        Object.keys(defaultDict).forEach(function (key) {\n                            if (definition.properties[key]) {\n                                definition.properties[key].default = defaultDict[key];\n                            }\n                        });\n                    });\n                    // update swaggerJson with definition\n                    switch (method) {\n                    case 'patch':\n                    case 'post':\n                    case 'put':\n                        tmp = {\n                            in: 'body',\n                            name: 'body',\n                            required: true,\n                            schema: { type: 'string' }\n                        };\n                        if (Object.keys(definition.properties).length) {\n                            swaggerJson.definitions[definitionName] = definition;\n                            tmp.schema = { $ref: '#/definitions/' + definitionName };\n                            operation.parameters.push(tmp);\n                        }\n                        break;\n                    }\n                    // update swaggerJson with operation\n                    swaggerJson.paths[path] = swaggerJson.paths[path] || {};\n                    swaggerJson.paths[path][method] = operation;\n                });\n            });\n            // fix validation - semanticUniquePath\n            pathDict = {};\n            Object.keys(swaggerJson.paths).forEach(function (path) {\n                tmp = path.replace((/\\{.*?\\}/g), '{}');\n                pathDict[tmp] = pathDict[tmp] || {};\n                pathDict[tmp][path] = true;\n            });\n            Object.keys(pathDict).forEach(function (key) {\n                tmp = Object.keys(pathDict[key]).sort();\n                if (tmp.length === 1) {\n                    return;\n                }\n                tmp.forEach(function (path, ii) {\n                    swaggerJson.paths[path + '#' + ii] = swaggerJson.paths[path];\n                    delete swaggerJson.paths[path];\n                });\n            });\n            // init tags\n            swaggerJson.tags = Object.keys(swaggerJson['x-swgg-tags0-override'])\n                .map(function (key) {\n                    return swaggerJson['x-swgg-tags0-override'][key];\n                })\n                .sort(function (aa, bb) {\n                    return aa.name < bb.name\n                        ? -1\n                        : 1;\n                })\n                .map(function (element) {\n                    return {\n                        name: element.name,\n                        'x-swgg-descriptionLineList':\n                            element.externalDocs['x-swgg-descriptionLineList']\n                    };\n                });\n            // validate headerAcceptDict\n            console.error(Object.keys(headerAcceptDict).sort().filter(function (key) {\n                return headerAcceptDict[key] < 2;\n            }));\n            // save swaggerJson\n            local.fs.writeFileSync(\n                'assets.swgg.swagger.json',\n                local.jsonStringifyOrdered(swaggerJson, null, 4)\n            );\n            local.buildReadme({}, onError);\n        };\n    }());\n}());\n","/home/travis/build/kaizhu256/node-swgg-github-all/lib.swgg_github_all.js":"/* istanbul instrument in package swgg_github_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        /* istanbul ignore next */\n        if (local) {\n            local = local.global.utility2_rollup ||\n                local.global.utility2_rollup_old ||\n                require('./assets.utility2.rollup.js');\n            local.fs = null;\n        }\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_swgg_github_all = local;\n        } else {\n            // require builtins\n            Object.keys(process.binding('natives')).forEach(function (key) {\n                if (!local[key] && !(/\\/|^_|^sys$/).test(key)) {\n                    local[key] = require(key);\n                }\n            });\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n        }\n        // init lib\n        local.local = local.swgg_github_all = local;\n    }());\n}());\n","/home/travis/build/kaizhu256/node-swgg-github-all/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of swgg-github-all\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install swgg-github-all && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package swgg_github_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_swgg_github_all\n            : global.utility2_moduleExports);\n        // init exports\n        local.global.local = local;\n        // init assets\n        local.assetsDict['/assets.index.template.html'] = local.assetsDict['/assets.swgg.html'];\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-test\n    /* istanbul ignore next */\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - init-test\n    /* istanbul ignore next */\n    case 'node':\n        // init exports\n        module.exports = local;\n        // require builtins\n        Object.keys(process.binding('natives')).forEach(function (key) {\n            if (!local[key] && !(/\\/|^_|^sys$/).test(key)) {\n                local[key] = require(key);\n            }\n        });\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        [\n            'assets.index.css',\n            'assets.index.template.html',\n            'assets.swgg.swagger.json',\n            'assets.swgg.swagger.server.json'\n        ].forEach(function (file) {\n            file = '/' + file;\n            local.assetsDict[file] = local.assetsDict[file] || '';\n            if (local.fs.existsSync(local.__dirname + file)) {\n                local.assetsDict[file] = local.fs.readFileSync(\n                    local.__dirname + file,\n                    'utf8'\n                );\n            }\n        });\n        local.assetsDict['/'] =\n            local.assetsDict['/assets.example.html'] =\n            local.assetsDict['/assets.index.template.html']\n            .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                // jslint-hack\n                String(match0);\n                switch (match1) {\n                case 'npm_package_description':\n                    return 'the greatest app in the world!';\n                case 'npm_package_name':\n                    return 'swgg-github-all';\n                case 'npm_package_nameLib':\n                    return 'swgg_github_all';\n                case 'npm_package_version':\n                    return '0.0.1';\n                default:\n                    return match0;\n                }\n            });\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.swgg_github_all.js'] =\n            local.assetsDict['/assets.swgg_github_all.js'] ||\n            local.fs.readFileSync(\n                local.__dirname + '/lib.swgg_github_all.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());"}